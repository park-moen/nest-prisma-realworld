// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  email    String  @unique @default("")
  password String
  bio      String?
  image    String?

  article    Article[]
  comment    Comment[]
  followedBy UserToUser[]    @relation("UserToUserFollowed")
  following  UserToUser[]    @relation("UserToUserFollowing")
  favorites  UserToArticle[]
}

model Article {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  description String   @default("")
  body        String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  comment     Comment[]
  favoritedBy UserToArticle[]
  tagList     ArticleToTag[]
}

model Tag {
  id       Int            @id @default(autoincrement())
  name     String         @unique
  articles ArticleToTag[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author    User    @relation(fields: [authorId], references: [id])
  authorId  Int
  article   Article @relation(fields: [articleId], references: [id])
  articleId Int
}

model UserToUser {
  id Int @id @default(autoincrement())

  follower    User @relation("UserToUserFollowing", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("UserToUserFollowed", fields: [followingId], references: [id])
  followingId Int

  @@unique([followerId, followingId])
}

model UserToArticle {
  id Int @id @default(autoincrement())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articleId Int

  @@unique([userId, articleId])
}

model ArticleToTag {
  id Int @id @default(autoincrement())

  article   Article @relation(fields: [articleId], references: [id])
  articleId Int
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     Int
}
